package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/nemesisesq/groomly/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (MetricValue)
// DB Table: Plural (metric_values)
// Resource: Plural (MetricValues)
// Path: Plural (/metric_values)
// View Template Folder: Plural (/templates/metric_values/)

// MetricValuesResource is the resource for the MetricValue model
type MetricValuesResource struct {
	buffalo.Resource
}

// List gets all MetricValues. This function is mapped to the path
// GET /metric_values
func (v MetricValuesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	metricValues := &models.MetricValues{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all MetricValues from the DB
	if err := q.All(metricValues); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, metricValues))
}

// Show gets the data for one MetricValue. This function is mapped to
// the path GET /metric_values/{metric_value_id}
func (v MetricValuesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty MetricValue
	metricValue := &models.MetricValue{}

	// To find the MetricValue the parameter metric_value_id is used.
	if err := tx.Find(metricValue, c.Param("metric_value_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, metricValue))
}

// New renders the form for creating a new MetricValue.
// This function is mapped to the path GET /metric_values/new
func (v MetricValuesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.MetricValue{}))
}

// Create adds a MetricValue to the DB. This function is mapped to the
// path POST /metric_values
func (v MetricValuesResource) Create(c buffalo.Context) error {
	// Allocate an empty MetricValue
	metricValue := &models.MetricValue{}

	// Bind metricValue to the html form elements
	if err := c.Bind(metricValue); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(metricValue)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, metricValue))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "MetricValue was created successfully")

	// and redirect to the metric_values index page
	return c.Render(201, r.Auto(c, metricValue))
}

// Edit renders a edit form for a MetricValue. This function is
// mapped to the path GET /metric_values/{metric_value_id}/edit
func (v MetricValuesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty MetricValue
	metricValue := &models.MetricValue{}

	if err := tx.Find(metricValue, c.Param("metric_value_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, metricValue))
}

// Update changes a MetricValue in the DB. This function is mapped to
// the path PUT /metric_values/{metric_value_id}
func (v MetricValuesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty MetricValue
	metricValue := &models.MetricValue{}

	if err := tx.Find(metricValue, c.Param("metric_value_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind MetricValue to the html form elements
	if err := c.Bind(metricValue); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(metricValue)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, metricValue))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "MetricValue was updated successfully")

	// and redirect to the metric_values index page
	return c.Render(200, r.Auto(c, metricValue))
}

// Destroy deletes a MetricValue from the DB. This function is mapped
// to the path DELETE /metric_values/{metric_value_id}
func (v MetricValuesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty MetricValue
	metricValue := &models.MetricValue{}

	// To find the MetricValue the parameter metric_value_id is used.
	if err := tx.Find(metricValue, c.Param("metric_value_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(metricValue); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "MetricValue was destroyed successfully")

	// Redirect to the metric_values index page
	return c.Render(200, r.Auto(c, metricValue))
}
